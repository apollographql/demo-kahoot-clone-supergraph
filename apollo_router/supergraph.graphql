schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Choice
  @join__type(graph: QUIZ)
{
  id: ID!
  text: String!
}

scalar join__FieldSet

enum join__Graph {
  PLAYER @join__graph(name: "player", url: "http://localhost:4006")
  QUIZ @join__graph(name: "quiz", url: "http://localhost:4005")
}

type Leaderboard
  @join__type(graph: QUIZ)
{
  quiz: Quiz!
  list: [Player!]!
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: PLAYER)
  @join__type(graph: QUIZ)
{
  """Join a quiz with a username"""
  createPlayer(userName: String!, quizId: ID!): Player @join__field(graph: PLAYER)

  """For an user who answers to a question in a quiz"""
  answer(quizId: ID!, choiceId: ID): Response! @join__field(graph: QUIZ)

  """For admin to trigger the next question"""
  nextQuestion(quizId: ID!): Question @join__field(graph: QUIZ)
}

type Player
  @join__type(graph: PLAYER, key: "id quizId")
  @join__type(graph: QUIZ, key: "id quizId")
{
  id: ID!
  name: String! @join__field(graph: PLAYER)
  quizId: ID!
  points: Int @join__field(graph: QUIZ)
}

type Query
  @join__type(graph: PLAYER)
  @join__type(graph: QUIZ)
{
  """Get the data for a specific player"""
  player(playerId: ID!): Player @join__field(graph: PLAYER)

  """
  Get the list of all players for a quiz (to know how much players we have for that quiz)
  """
  playersForAQuiz(quizId: ID!): [Player!]! @join__field(graph: PLAYER)

  """Get the list of all available quizzes"""
  allQuizzes: [Quiz!]! @join__field(graph: QUIZ)

  """Get the leaderboard for a quiz"""
  leaderboardForQuiz(id: ID!): Leaderboard @join__field(graph: QUIZ)
}

type Question
  @join__type(graph: QUIZ, key: "id")
{
  id: ID!
  title: String!
  choices: [Choice!]!
}

type Quiz
  @join__type(graph: QUIZ, key: "id")
{
  id: ID!
  title: String!
  questions: [Question!]!
}

type Response
  @join__type(graph: QUIZ)
{
  """Was it the right answer"""
  success: Boolean!

  """What was the right choice"""
  rightChoice: Choice!
}

type Subscription
  @join__type(graph: PLAYER)
  @join__type(graph: QUIZ)
{
  """
  Listen to the list of all players for a quiz (to know how much players we have for that quiz)
  """
  playersForAQuiz(quizId: ID!): [Player!]! @join__field(graph: PLAYER)

  """Listens for changes in what question to show now for a quiz"""
  newQuestion(quizId: ID!): Question! @join__field(graph: QUIZ)

  """Listens the leaderboard for a quiz"""
  leaderboardForQuiz(id: ID!): Leaderboard! @join__field(graph: QUIZ)
}
